generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String          @id @default(cuid())
    password            String?
    name                String?
    email               String?         @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    Resume              String?
    userResumeText      String?
    improvement         String[]
    suggestion          String[]
    SuggestedResume     String?
    field               String?
    numberOfCoverLetter Int             @default(0)
    numberOfEmail       Int             @default(0)
    numberOfScore       Int             @default(0)
    resumeUpload        Int             @default(0)
    stripeCustomerId    String?         @unique
    PaymentIntent       PaymentIntent[]
    UserPlan            UserPlan?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    JobCard   JobCard[]
}

enum PlanType {
    BASE
    PRO
    ELITE
}

model PaymentIntent {
    id                    String   @id @default(cuid())
    stripePaymentIntentId String   @unique
    userId                String
    // planId                String
    planType              PlanType // Add this to store plan type directly
    amount                Float
    status                String // pending, completed, failed, cancelled
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([status])
    @@index([createdAt])
}

model UserPlan {
    id       String   @id @default(cuid())
    userId   String   @unique
    planType PlanType @default(BASE)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([planType])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model JobCard {
    id              String   @id @default(cuid())
    employer_name   String
    employer_logo   String?
    job_title       String
    job_description String
    job_location    String
    job_country     String
    job_salary_min  Int?
    job_salary_max  Int?
    job_publisher   String
    job_apply_link  String
    userId          String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
